apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: "androidx.navigation.safeargs.kotlin"

def configFilePath = "./src/main/assets/config.json"
def configFileEmptyMessage = "You are building Sinch Android Reference Sample Application project that requires presence of a configuration file with your auhthorization data.\n" +
        "Create and place your config.json file inside the " +
        "assets folder (app/src/main/assets) and re-build the application\n" +
        "Example of config.json:\n" +
        "[{\n" +
        "  \"name\": \"<ENVIRONMENT NAME\",\n" +
        "  \"appKey\": \"<YOUR SINCH APP KEY>\",\n" +
        "  \"appSecret\": \"<YOUR SINCH APP SECRET>\",\n" +
        "  \"environment\": \"ocra.api.sinch.com\"\n" +
        "}]\n" +
        "Check the \"Create configuration file\" section of the Readme file for more details regarding its content and structure."

def requiredConfigFileParamsMissingMessage = "You are building Sinch Android Reference Sample Application project that requires your application specific authorization data (key and secret).\n" +
        "Check config.json file located in app/src/main/assets folder and fill it with these values copied from Sinch portal website of your application.\n" +
        "Check the \"Create configuration file\" section of the Readme for more details regarding content and structure of the config.json file."

def googleServicesJsonFilePath = "./google-services.json"
def googleServicesJsonMissingMessage = "You are building Sinch Android Reference Sample Application project that uses Firebase Cloud Messaging for delivering push notifications.\n" +
        "In order for push notification to work you must generate and include your application specific (with correspondent \"package_name\") google-services.json file.\n" +
        "Follow the Firebase Cloud Messaging manual here https://firebase.google.com/docs/android/setup to get one.\n" +
        "For more information regarding Sinch Managed Push Notifications refer to https://developers.sinch.com/docs/voice-android-cloud-push-notifications#2-provision-the-application-with-the-support-code"


task runMakeSync(type: Exec) {
    workingDir '..'
    commandLine 'make', 'sync'
}

task runMakeSyncIfNeeded() {
    def libs = fileTree("libs").filter { it.isFile() }.files.name
    def isRTCSDKAlreadySynced = libs.findAll { it.contains("sinch-android-rtc") }
    if (!isRTCSDKAlreadySynced) {
        finalizedBy(runMakeSync)
    } else {
        println("Sync skipped. VVC SDK already present.")
    }
}

android {
    compileSdkVersion 33

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId "com.sinch.rtc.vvc.reference.app"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    buildFeatures {
        viewBinding true
    }
    namespace 'com.sinch.rtc.vvc.reference.app'
}
preBuild.dependsOn(runMakeSyncIfNeeded)
preBuild.doFirst {
    def configFile = file(configFilePath)
    if (!configFile.exists()) {
        ant.fail(configFileEmptyMessage)
    }
    if (configFile.text.contains("<YOUR APP KEY>") || configFile.text.contains("<YOUR APP SECRET>")) {
        ant.fail(requiredConfigFileParamsMissingMessage)
    }
    if (!file(googleServicesJsonFilePath).exists()) {
        ant.fail(googleServicesJsonMissingMessage)
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation fileTree(dir: "libs", include: ["*.aar"])

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "androidx.activity:activity-ktx:$activity_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"

    // Kotlin Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_component_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_component_version"

    // Material Design
    implementation "com.google.android.material:material:$material_design_version"

    // Messaging
    implementation "com.google.firebase:firebase-messaging:$firebase_messaging_version"

    //Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    testImplementation 'junit:junit:4.12'
    testImplementation "androidx.room:room-testing:$room_version"

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

}

apply plugin: 'com.google.gms.google-services'  // Google Services plugin
